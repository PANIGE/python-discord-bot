There comes a point in your botâ€™s development when you want to organize a collection of commands, listeners, and some state into one class. Cogs allow you to do just that.

The gist:
Each cog is a Python class that subclasses `commands.Cog.`

Every command is marked with the `commands.command()` decorator.

Every listener (events) is marked with the `commands.Cog.listener()` decorator.

Cogs are then registered with the `Bot.add_cog()` call.

Cogs are subsequently removed with the `Bot.remove_cog()` call.

It should be noted that cogs are typically used alongside with `Extensions`.

**__Quick Example__**

This example cog defines a Greetings category for your commands, with a single command named hello as well as a listener to listen to an Event.
(And also present in the cogs folder as `hello.py.template` for Uso Bot Devs)

```py
from objects import Context
from discord.ext import commands
import discord

class Handler(commands.Cog):
    def __init__(self):
        self.bot = Context.Bot
        self._last_member = None

    @commands.command()
    async def hello(self, ctx, *, member: discord.Member = None):
        """Says hello"""
        member = member or ctx.author
        if self._last_member is None or self._last_member.id != member.id:
            await ctx.send('Hello {0.name}~'.format(member))
        else:
            await ctx.send('Hello {0.name}... This feels familiar.'.format(member))
        self._last_member = member

#Note to rename Handler to have correct cog name in help !
Context.Bot.add_cog(Handler())
```

It works just like a basic discord bot with only the gist changes